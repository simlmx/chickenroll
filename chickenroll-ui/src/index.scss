@use "sass:color";
@use "sass:math";

/* $debug: true; */
$debug: false;

/* THEME */
$primary: #468189;
/* $primary: #973b84; */

$black: #191516;
$lightgrey: lightgrey;
$darkgrey: #252422;
$bgcolor: #f7f6f2;
$secondary: #6c757d;
$danger: #d70c0c;
$success: #0c8f29;

html p {
  color: $darkgrey;
}

html h1,
html h2,
html h3,
html h4 {
  color: $black;
}

$theme-colors: (
  // We use "secondary" for disabled things like buttons and disconnected players.
  "secondary": $secondary,
  "primary": $primary,
  "danger": $danger,
  "success": $success
);

$buttonsWidth: 150px;
$buttonsHeight: 175px;

@import "bootstrap/scss/bootstrap.scss";

.manipulation {
  touch-action: manipulation;
}

body {
  font-family: Verdana, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: transparent;
}

@include media-breakpoint-up(xl) {
  html {
    font-size: 21px;
  }
}
@include media-breakpoint-down(lg) {
  html {
    font-size: 19px;
  }
}
@include media-breakpoint-down(md) {
  html {
    font-size: 17px;
  }
}

@include media-breakpoint-down(sm) {
  html {
    font-size: 16px;
  }
}

button {
  margin: 2px;
}

p a {
  font-weight: bold;
}

.btn {
  transition: none;
}

// NOTE those colors are duplicated in the game definition
$colors: #07df9e, #01a4df, #ff7c36, #ffde0a, #c7233f, #f35076, #a32ea3;

@for $i from 1 through length($colors) {
  $color: nth($colors, $i);
  .color#{$i - 1} {
    color: $color;
  }

  .bgcolor#{$i - 1} {
    color: white;
    background-color: $color;
    border: 0.05rem solid transparent;
    border-color: $color;
    fill: $color;
  }

  .textColor#{$i - 1} {
    color: white;
  }

  .bgcolor#{$i - 1}alpha40 {
    background-color: color.adjust($color, $alpha: -0.6);
    border: 0.05rem solid transparent;
  }

  button.bgcolor#{$i - 1},
  button.bgcolor#{$i - 1}:hover {
    color: white;
    background-color: $color;
    border: 1px solid transparent;
    border-color: $color;
  }

  .border#{$i - 1} {
    border-color: $color;
  }

  .dotColor#{$i - 1} {
    fill: white;
  }

  .scoreChicken#{$i - 1} > svg path {
    fill: $color;
  }

  .chickenColor#{$i - 1} > svg path {
    fill: $color !important;
  }
}

// For the pale colors, we adjust a few things, like make text black instead of white
// when it's a background.
@mixin setPaleColors($index) {
  .bgcolor#{$index} {
    color: black;
    border-color: black;
  }

  .textColor#{$index} {
    color: black;
  }

  button.bgcolor#{$index},
  button.bgcolor#{$index}:hover {
    color: black;
    border: 0.05rem solid black;
  }

  .dotColor#{$index} {
    fill: black;
  }

  // The pale players are too close to white, we make it a bit darker
  .infoPlayerName.color#{$index} .itsYourTurn.color#{$index},
  .infoPlayerName.color#{$index} .itsYourTurn.color#{$index} {
    filter: brightness(0.9);
  }

  .bgcolor#{$index}alpha40 {
    border: 0.05rem solid transparent;
  }
}

@include setPaleColors(0);
@include setPaleColors(3);

.howToPlayWrap {
  display: flex;

  flex-direction: column;
  justify-content: center;
  align-items: center;
  text-align: center;

  border-radius: 999px;

  height: 1.4rem;
  width: 1.4rem;

  cursor: pointer;

  border: 3px solid rgba(black, 0.4);
  background-color: rgba(black, 0.05);
  color: rgba(black, 0.7);

  font-size: 1rem;
  font-weight: bold;
}

.modal {
  display: block;
  pointer-events: none;
}

.homeTitle {
  font-weight: bold;
  text-align: center;
}

.homePageLink,
.homePageLink:hover {
  font-weight: normal;
}

// No margin at the bottom of the last paragraph of a section.
p:last-child {
  margin-bottom: 0;
}

.homeContent {
  .diceContainer {
    width: auto;
  }
  .die {
    border-width: 0 !important;
  }
}

.rightWrap {
  align-self: stretch;

  display: flex;
  flex-direction: column-reverse;
  justify-content: space-between;
}

.diceButtons {
  align-self: stretch;

  display: flex;
  align-items: center;
  justify-content: center;
}

.boardContent {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.bandBegin,
.bandMiddle,
.bandEnd {
  flex: 1;
}

.mountainWrap {
  display: flex;
  justify-content: center;
  flex-direction: column;
}

.cantStopBoard {
  display: flex;
  justify-items: center;
  align-items: center;
  flex-direction: column;
  height: 100% !important;
  width: 100%;
}

#background {
  pointer-events: none;
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;

  .die {
    stroke-radius: 0;
  }
}

// The media query fixes an issue on ios where the button at the same place as the last
// clicked button is "hovered".
@media (hover: hover) {
  // this feels pretty hacky
  .btn-primary:hover {
    background-color: $primary;
    filter: brightness(1.1) !important;
  }

  .btn:hover {
    filter: brightness(1.1) !important;
  }

  .btnAction:hover {
    filter: brightness(1.1) !important;
  }

  a:hover {
    color: $primary;
    text-decoration: underline;
  }

  .nav-link:hover {
    color: $primary;
    text-decoration: underline;
  }
}

// Active is fine though!
.btn:active {
  filter: brightness(1.1);
}

.btnAction:hover {
  filter: brightness(1.1);
}

.lastChoiceOtherPlayer:disabled {
  background-color: #000000;
}

@mixin setDice($diceSize) {
  $unit: $diceSize / 40;

  .die {
    width: $diceSize;
    height: $diceSize;
    border-radius: 0.25rem;
    margin: $diceSize * 0.04;
    border-width: 0;
    box-shadow: $unit $unit 4 * $unit -3 * $unit black;
  }

  .diceContainer {
    margin: 0.3rem;
    width: $diceSize * 2.2;
    height: $diceSize * 2.2;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
  }
}

$diceSize: 3.4rem;
@include setDice($diceSize);

.diceRow {
  display: flex;
  align-items: center;
  justify-content: center;
}

.buttonsWrap,
.fakeButtons {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
}

.fakeButtonsWrap {
  display: flex;
  flex-direction: row;
}

.fakeButton {
  display: flex;
  flex-direction: column;
  width: 0 !important;
  padding-right: 0 !important;
  padding-left: 0 !important;
  color: transparent !important;
  border-color: transparent !important;
  background-color: transparent !important;
}

.fakeButtonInside {
  height: 0 !important;
  padding-top: 0 !important;
  padding-bottom: 0 !important;
  margin-top: 0 !important;
  margin-bottom: 0 !important;
  color: transparent !important;
  border-color: transparent !important;
  background-color: transparent !important;
}

.fakeButtonInsideWrap {
  height: 0;
  display: flex;
  flex-direction: row;
}

.btnAction {
  width: 100%;
  margin: 0.1rem;
  padding: 10px 20px;
  font-size: 21px;

  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.rollBust {
  font-size: 0.8rem;
}

.possibilitiesRow {
  flex: 1;
  margin-top: 2px;
  margin-bottom: 2px;

  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
}

.diceBoard {
  text-align: center;
  display: flex;
  align-items: center;
  justify-content: center;
}

.scoreBoard {
  align-self: center;
}

.scoreBoard td {
  padding: 0;
  margin: 0;
  height: 100%;
}

.scoreBoard tr {
  height: 100%;
}

.scoreBoardNameWrap {
  width: 9rem;
  overflow: hidden;
}

.scoreBoardPlayerName,
.scoreBoardNumVictories {
  border-radius: 0.2rem;
  padding-left: 0.2rem;
  padding-right: 0.2rem;
  font-size: 0.8rem;
  margin: 0.1rem;
}
.scoreBoardPlayerName {
  border: 0.05rem solid transparent;

  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.scoreBoardNumVictories {
  border-radius: 0.2rem;
  justify-content: flex-end;
  font-weight: bold;
  border: 0;

  display: flex;
  align-items: center;
}

.scoreBoardPlayerNameCurrent {
  border: 0.05rem solid black;
  box-shadow: 0 0 0.14rem black;
}

.flashVibrate {
  animation: vibrate;
  animation-duration: 2.5s;
  animation-iteration-count: infinite;
  animation-direction: reverse;
  animation-timing-function: linear;
}

@keyframes vibrate {
  from {
    transform: rotate(0deg);
  }
  1% {
    transform: rotate(-2deg);
  }
  2% {
    transform: rotate(0);
  }
  3% {
    transform: rotate(3deg);
  }
  4% {
    transform: rotate(0);
  }
  6% {
    transform: rotate(-3deg);
  }
  8% {
    transform: rotate(0);
  }
  10% {
    transform: rotate(2deg);
  }
  12% {
    transform: rotate(0);
  }
  to {
    transform: rotate(0deg);
  }
}

.mountainCell {
  display: table-cell;
  position: relative;
}

.climber {
  box-shadow:
    0 0 0.2rem -0.05rem black,
    0.05rem 0.1rem 0.15rem 0 black;
  z-index: 50;
  border-width: 0px;
  border-radius: 50% / 60% 60% 40% 40%;
}

.climberCurrent {
  background-color: black;
  box-shadow:
    0 0 0.05rem 0.05rem black,
    0.05rem 0.15rem 0.2rem 0 black;
  border-style: solid;
}

.climberGroup {
  display: flex;
  align-items: center;
  justify-content: center;

  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
}

.climberGroupBackground {
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  height: 100%;

  display: flex;
  justify-content: center;
}

.climberPlaceholder {
  border-radius: 0.3rem;
  background-color: #555555;
  width: 0.3rem;
  height: 0.3rem;
}

.colBgWrap {
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;

  display: flex;
  justify-content: center;
  align-items: center;
}

.colBgNotBlocked {
  background-color: rgba(black, 0.15);
}

.colFgNotBlocked {
  background-color: white;
  color: black;
}

.colFgMiddle.colFgNotBlocked {
  background-color: rgba(black, 0.7);
}

.infoWrap {
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  right: 0;
  pointer-events: none;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  z-index: 100000;
}

.infoBackground {
  background-color: rgba(white, 0.95);
  border-radius: 1rem;
  box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.4);
  padding: 1rem;
}

.info {
  font-size: 1.5rem;

  opacity: 2;
  pointer-events: auto;
  cursor: pointer;

  padding: 0.4rem;
  margin: 0;
  border-radius: 0;
  display: flex;
  align-items: center;
  justify-content: center;
}

.probMsgWrap {
  font-size: 0.8rem;
}

.itsYourTurn {
  font-weight: bold;
  font-size: 2.2rem;
}

.homeLinkWrap {
  position: absolute;
  left: 0.4rem;
  top: 0.3rem;

  display: flex;
  flex-direction: column;
  align-items: center;
}

.inGameIcon {
  width: 1.6rem;
  height: 1.6rem;

  display: flex;
  justify-content: center;
  align-items: center;

  margin: 0;
  margin-bottom: 0.5rem;

  z-index: 500;
}

.inGameIcon > div:last-child {
  margin-bottom: 0;
}

.homeLinkIcon {
  width: 2rem;
  height: 2rem;
}

.coffee {
  max-height: 1.5rem;
  max-width: 1.5rem;
}

.logoRow {
  display: flex;
}

.logoWrap {
  margin: 0;
}

.logoWrap .die {
  height: 0.85rem;
  width: 0.85rem;
  border-radius: 0;
  border: 0.02rem solid black;
  margin: 0.03rem;
}

.diceBoardButtonWrap {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
}

.scoreChicken {
  display: flex;
  padding: 0 0.03rem;
  > svg {
    width: 1.2rem;
    height: 1.2rem;

    path {
      stroke: black;
      stroke-width: 0.2rem;
    }
  }
}
.emptyChicken > svg path {
  fill: transparent;
}

.transparentChicken > svg path {
  fill: transparent;
  stroke: transparent;
}

.dieHighlight {
  filter: brightness(1.1);
  border: 1px solid black;
}

.highlight {
  filter: brightness(1.1);
  box-shadow:
    0px 0px 1px 1px black,
    1px 3px 6px 1px black;
}

.downlight {
  opacity: 0.6;
  box-shadow:
    0px 0px 1px 1px black,
    1px 3px 4px 0px black;
}

.actionButtons {
  height: $buttonsHeight;
  width: $buttonsWidth;

  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.megaWrap {
  flex: 1;
  display: flex;
  flex-direction: row;
}

.mountainRow {
  display: table-row;
}

// height /width for one cell
$mountainRatio: 0.67;
@mixin cellSize($height, $numCols: 11, $numRows: 13) {
  $width: $height / $mountainRatio;

  $neg-margin: $width * -0.1;
  $climberSize: $width * 0.36;
  $colNumWidth: $width * 0.5;
  $currentClimberSize: $climberSize;
  $currentClimberBorder: $width * 0.035;
  $mountainWidth: $width * $numCols;
  $blockedSize: $width * 0.35;

  .mountain {
    display: table;
    width: $width * $numCols;
    height: $height * $numRows;
  }
  .climber {
    height: $climberSize * 1.25;
    width: $climberSize * 1;
    margin-right: $neg-margin;
    margin-left: $neg-margin;
  }

  .climberCurrent {
    height: $currentClimberSize * 1.25;
    width: $currentClimberSize;
    border-width: $currentClimberBorder !important;
  }

  .colFgTop,
  .colFgBottom {
    width: $colNumWidth;
    height: $colNumWidth;
    font-size: $width / 2.5;
    font-weight: bold;

    border-radius: 999px;
    display: flex;
    justify-content: center;
    align-items: center;
    border: none;
  }

  .colFgBottom {
    width: $colNumWidth * 0.9;
    height: $colNumWidth * 0.9 * 1.25;
    border-radius: 50% / 60% 60% 40% 40%;
    // This makes is similar to the chicken svg border.
    border: 0.04rem solid rgba(black, 0.55);
  }

  .colFgMiddle {
    border: none;
    width: $height / 10;
    height: $height / 10;
    border-radius: 999px;
  }

  .colBgTop {
    position: relative;
  }

  .colFgTop {
    background-color: transparent;
    z-index: 5;
  }

  .topChicken {
    color: transparent;
    position: absolute;
    height: $width * 0.8;
    width: $width * 0.8;
    z-index: 4;
    left: -4%;
    top: -20%;
  }

  .topChicken > svg path {
    stroke: black;
    stroke-width: 0.15rem;
    fill: white;
  }

  .twoDigits {
    font-size: $width / 3.2;
  }

  .twoDigits.colFgTop {
    position: absolute;
    top: 8%;
  }

  .colBg {
    width: 65%;
    height: 100%;

    display: flex;
    justify-content: center;
    align-items: center;
  }
  .colBgTop {
    border-radius: 999px 999px 0 0;
  }
  .colBgBottom {
    border-radius: 0 0 999px 999px;
  }
}

.bigHspace {
  flex: 1;
}

.diceButtonsBefore,
.diceButtonsAfter {
  flex: 1;
}

.diceButtonsMiddle {
  flex: 0.5;
}

.pointer {
  cursor: pointer;
}

.eggsLeftWrap {
  flex: 1;
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
}

.eggsAndDice {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  width: 100%;
  height: 100%;
}

.climberSide {
  margin: 0.4rem !important;
}
// Default is really tall not wide
// In that case we want the mountain to take the full width

.classicMountainWrap {
  $width: 96vw / 11;
  $height: $width * $mountainRatio;
  @include cellSize($height, 11, 13);
}

.tallMountainWrap {
  $width: 96vw / 11;
  $height: $width * $mountainRatio;
  @include cellSize($height, 11, 16);
}

.debugMountainWrap {
  $width: 50vw / 11;
  $height: $width * $mountainRatio;
  @include cellSize($height, 11, 3);
}

@if $debug {
  * {
    border: 1px solid red !important;
  }
}

// As we get closer to a square, we want to use some ratio of the height of the device
// as the side of our mountain square
@media (min-aspect-ratio: 3/5) {
  .classicMountainWrap {
    @include cellSize(50vh / 14, 11, 13);
  }
  .tallMountainWrap {
    @include cellSize(50vh / 17, 11, 16);
  }
  @if $debug {
    * {
      border: 1px solid orange !important;
    }
  }
}

@media (min-aspect-ratio: 1/1) {
  $width: 50vw / 11;
  $height: $width * $mountainRatio;
  .classicMountainWrap {
    @include cellSize($height, 11, 13);
  }
  .tallMountainWrap {
    @include cellSize($height, 11, 16);
  }
  @if $debug {
    * {
      border: 1px solid gold !important;
    }
  }

  .rightWrap {
    flex-direction: column;
  }

  .megaWrap {
    flex-direction: column;
  }

  .bandMiddle {
    flex: 0.1;
  }

  .boardContent {
    flex-direction: row;
  }

  .diceButtons {
    flex-direction: column;
  }

  .eggsAndDice {
    flex-direction: row;
  }

  .eggsLeftWrap {
    flex-direction: column;
  }
}

@media (min-aspect-ratio: 4/3) {
  .classicMountainWrap {
    @include cellSize(80vh / 14, 11, 13);
  }
  .tallMountainWrap {
    @include cellSize(80vh / 17, 11, 16);
  }

  @if $debug {
    * {
      border: 1px solid green !important;
    }
  }
}

@media (min-aspect-ratio: 6/2) {
  .classicMountainWrap {
    @include cellSize(95vh / 14, 11, 13);
  }
  .tallMountainWrap {
    @include cellSize(95vh / 17, 11, 16);
  }

  .diceButtons {
    flex-direction: row;
  }
  .bandMiddle {
    flex: 0.2;
  }
  @if $debug {
    * {
      border: 1px solid blue !important;
    }
  }
}
@media (min-width: 800px) and (min-height: 800px) and (min-aspect-ratio: 3/2) {
  .diceButtons {
    flex-direction: column;
  }
  .bandMiddle {
    flex: 0;
  }
  @if $debug {
    * {
      border: 1px solid purple !important;
    }
  }
}

// Tweaks per bootstrap breakpoints.
// On a super big screen that is a nice "normal" rectangle, we don't make the mountain
// as big.

@media (min-width: 1200px) and (min-height: 900px) and (min-aspect-ratio: 1/1) and (max-aspect-ratio: 7/3) {
  .classicMountainWrap {
    @include cellSize(65vh / 14, 11, 13);
  }
  .tallMountainWrap {
    @include cellSize(65vh / 17, 11, 16);
  }
  @if $debug {
    * {
      border: 1px solid pink !important;
    }
  }
}

// We reuse a bunch of components in the Rules, but we need to adjust some of the
// parameters.
.rules {
  p,
  li {
    text-align: justify;
  }

  @include setDice(1.2rem);

  .die {
    border-radius: 0.1rem;
  }

  .btnAction {
    font-size: 1rem;
    padding: 0 0.5rem;
    display: inline-block;
    width: auto;
  }

  @include cellSize(1.2rem, 3, 3);
  .mountainWrap {
    @include cellSize(1rem, 3, 3);
  }

  .fullMountain {
    @include cellSize(1rem);
    display: flex;
    justify-content: center;
  }

  .climber {
    margin: 0rem 0.1rem;
    display: inline-block;
  }

  .ruleRow {
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .bust {
    padding: 0.12rem;
    font-size: 1rem;
  }

  .container-fluid {
    padding: 0;
  }

  .movesWrap {
    p {
      margin: 0;
    }

    display: flex;
    justify-content: center;
    align-items: center;

    margin-bottom: 1rem;
  }

  .movesBox {
    border: 2px solid black;
    border-radius: 1rem;
    background-color: rgba(white, 0.6);
    padding: 0.5rem;
    margin: 0.2rem;

    display: flex;
    justify-content: space-between;
    align-items: center;

    p {
      max-width: 16rem;
    }
  }

  .movesRight {
    padding-left: 0.8rem;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  hr {
    margin: 0.2rem;
    border: none;
    height: 1px;
    color: black;
    background-color: black;
  }
  .doubleDiceWrap {
    padding: 0;
    margin: 0;
  }

  .doubleDiceRow {
    display: flex;
    padding: 0;
    margin: 0;
  }
}

.about {
  p {
    text-align: justify;
  }
}

.gameStartedWithoutYou {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  text-align: center;
}

.soundIconWrap {
  width: 100%;
  height: 100%;
}

.flatDiceContainer {
  flex-direction: row;
}

.moveIndex {
  font-size: 0.6rem;
  color: $lightgrey;
  border-radius: 0.1rem;
  font-weight: bold;
  margin-right: 0.3rem;
  width: 1rem;
  text-align: right;
}

.moveHistoryModal {
  width: 15rem;
  /* margin-left: 3rem; */
}

.moveHistoryWrap {
  display: flex;
  justify-content: center;
  align-items: center;
}

.moveHistory {
  .diceContainer {
    height: auto;
    width: auto;
  }
  .die {
    width: 1rem;
    height: 1rem;
    border-radius: 0.1rem;
    margin: 0.1rem;
  }
  .btnAction {
    font-size: 0.8rem;
    padding: 0 0.5rem;
    width: auto;
  }

  .moveRow {
    display: flex;
    align-items: center;
  }
}

.mathNumber {
  width: 3rem;
  height: 3rem;
  font-size: 2rem;
  margin: 0.4rem;

  border: 0.2rem solid black;

  display: flex;
  justify-content: center;
  align-items: center;

  background-color: white;
  border-radius: 100%;
  font-weight: bold;
}

.mathNumber2Digits {
  font-size: 1.7rem;
}

.mathNumberAllowed {
  color: black;
  border-color: $success;
}

.mathNumberForbidden {
  color: black;
  border-color: $danger;
}

.mathRow {
  display: flex;
}

.mathWrap {
  display: flex;
  flex-direction: row;
  justify-content: center;
  width: 100%;
  max-width: 30rem;
}

.modeWrap {
  min-width: 7rem;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.rowsWrap {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.mathWrapWrap {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  margin-bottom: 1rem;
}

.mathPage {
  width: 100%;
  height: 100%;
  .die {
    margin: 0.1rem;
    width: 1rem;
    height: 1rem;
    border-radius: 0.1rem;
  }
}

.historyBustEmoji {
  margin-left: 0.1rem;
}

.btnPossibilities {
  margin: 2px !important;
  flex: 1;
  padding: 0;
  position: relative;
  display: flex;
  flex-direction: row;
  height: 100%;
}

.diceSplit {
  position: absolute;
  top: 0.5px;
  left: 0.5px;

  display: flex;
  flex-direction: column;
}

.diceSplitRow {
  display: flex;
}

.diceSplitDie {
  margin: 0.4px;
  border-radius: 1.5px;
  height: 6px;
  width: 6px;
  border: 1px solid black;
}

.diceSplitWhite {
  background-color: white;
}

.diceSplitBlack {
  background-color: black;
}

.diceSplitPale {
  background-color: transparent;
  border-color: rgba(black, 0.5);
}

.notMeDisabled {
  background-color: #d1d1d1 !important;
  color: #646464 !important;
  border: none !important;
}

// This is what we use for buttons when it's not our turn.
.btn-secondary.notMe:hover {
  filter: none !important;
}

.possNumber {
  flex: 1;
}

.possNumberSeparator {
  height: 60%;
  width: 0;
  border-right: solid 1px rgba(black, 0.2);
  border-left: solid 1px rgba(white, 0.3);
}

.transparent {
  color: transparent;
  background-color: transparent;
  fill: transparent;
  user-select: none;
  stroke: transparent;
  stroke-width: 0;
  box-shadow: none;
  border-color: transparent;
}

.loading {
  background-color: $bgcolor;
  height: 100%;
  width: 100%;
}

/* Make sure the rules look somewhat uniform with the other game's rules */
#rules {
  h1,
  h2,
  h3,
  h4,
  p {
    all: revert;
    margin: 0;
    padding: 0;
  }

  h1 {
    text-align: center;
  }

  padding: 0.5rem;
}
